// Copyright (c) 2023 TrakHound Inc., All Rights Reserved.
// TrakHound Inc. licenses this file to you under the MIT license.

using MTConnect.Assets.CuttingTools;
using MTConnect.Assets.CuttingTools.Measurements;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace MTConnect.Assets.Json.CuttingTools
{
    public class JsonMeasurements
    {
{{- for type in types }}
        [JsonPropertyName("{{type.type_id}}")]
        public List<JsonMeasurement> {{type.name}}s { get; set; }

{{ end }}

        public JsonMeasurements() { }

        public JsonMeasurements(IEnumerable<IMeasurement> measurements)
        {
            if (!measurements.IsNullOrEmpty())
            {
                foreach (var measurement in measurements)
                {
                    switch (measurement.Type)
                    {
{{- for type in types }}
                        case {{type.name}}.TypeId:
                            if ({{type.name}}s == null) {{type.name}}s = new List<JsonMeasurement>();
                            {{type.name}}s.Add(new JsonMeasurement(measurement));
                            break;

{{ end }}                    
                    }            
                }
            }     
        }


        public IEnumerable<IMeasurement> ToMeasurements()
        {
            var measurements = new List<IMeasurement>();
        
{{ for type in types }}
            if (!{{type.name}}s.IsNullOrEmpty()) foreach (var measurement in {{type.name}}s) measurements.Add(measurement.ToMeasurement({{type.name}}.TypeId));
{{- end }}            

            return measurements;
        }
    }
}