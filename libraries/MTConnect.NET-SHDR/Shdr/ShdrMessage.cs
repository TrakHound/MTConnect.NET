// Copyright (c) 2023 TrakHound Inc., All Rights Reserved.
// TrakHound Inc. licenses this file to you under the MIT license.

using MTConnect.Input;
using MTConnect.Observations;
using System;
using System.Collections.Generic;
using System.Text.RegularExpressions;

namespace MTConnect.Shdr
{
    /// <summary>
    /// An Event Observation with a Type of MESSAGE
    /// </summary>
    public class ShdrMessage : ShdrDataItem
    {
        private static readonly Regex _deviceKeyRegex = new Regex("(.*):(.*)");


        /// <summary>
        /// Native code (usually an alpha-numeric value) generated by the controller of a piece of equipment providing a reference identifier for a Message.
        /// </summary>
        public string NativeCode
        {
            get => GetValue(ValueKeys.NativeCode);
            set => AddValue(new ObservationValue(ValueKeys.NativeCode, value));
        }


        public ShdrMessage() { }

        public ShdrMessage(string dataItemKey)
        {
            DataItemKey = dataItemKey;
            Timestamp = 0;
        }

        public ShdrMessage(string dataItemKey, string value)
        {
            DataItemKey = dataItemKey;
            Values = new List<ObservationValue>
            {
                new ObservationValue(ValueKeys.Result, value != null ? value.ToString() : string.Empty)
            };
            Timestamp = 0;
        }

        public ShdrMessage(string dataItemKey, string value, string nativeCode)
        {
            DataItemKey = dataItemKey;
            var values = new List<ObservationValue>();
            values.Add(new ObservationValue(ValueKeys.Result, value != null ? value.ToString() : string.Empty));
            if (!string.IsNullOrEmpty(nativeCode)) values.Add(new ObservationValue(ValueKeys.NativeCode, nativeCode));
            Values = values;
            Timestamp = 0;
        }

        public ShdrMessage(string dataItemKey, string value, long timestamp)
        {
            DataItemKey = dataItemKey;
            Values = new List<ObservationValue>
            {
                new ObservationValue(ValueKeys.Result, value != null ? value.ToString() : string.Empty)
            };
            Timestamp = timestamp;
        }

        public ShdrMessage(string dataItemKey, string value, string nativeCode, long timestamp)
        {
            DataItemKey = dataItemKey;
            var values = new List<ObservationValue>();
            values.Add(new ObservationValue(ValueKeys.Result, value != null ? value.ToString() : string.Empty));
            if (!string.IsNullOrEmpty(nativeCode)) values.Add(new ObservationValue(ValueKeys.NativeCode, nativeCode));
            Values = values;
            Timestamp = timestamp;
        }

        public ShdrMessage(string dataItemKey, string value, DateTime timestamp)
        {
            DataItemKey = dataItemKey;
            Values = new List<ObservationValue>
            {
                new ObservationValue(ValueKeys.Result, value != null ? value.ToString() : string.Empty)
            };
            Timestamp = timestamp.ToUnixTime();
        }

        public ShdrMessage(string dataItemKey, string value, string nativeCode, DateTime timestamp)
        {
            DataItemKey = dataItemKey;
            var values = new List<ObservationValue>();
            values.Add(new ObservationValue(ValueKeys.Result, value != null ? value.ToString() : string.Empty));
            if (!string.IsNullOrEmpty(nativeCode)) values.Add(new ObservationValue(ValueKeys.NativeCode, nativeCode));
            Values = values;
            Timestamp = timestamp.ToUnixTime();
        }

        public ShdrMessage(IObservationInput observation)
        {
            if (observation != null)
            {
                DeviceKey = observation.DeviceKey;
                DataItemKey = observation.DataItemKey;
                Values = observation.Values;
                Timestamp = observation.Timestamp;
            }
        }


        /// <summary>
        /// Convert ShdrMessage to an SHDR string
        /// </summary>
        /// <returns>SHDR string</returns>
        public override string ToString()
        {
            if (!string.IsNullOrEmpty(DataItemKey))
            {
                var target = DataItemKey;
                if (!string.IsNullOrEmpty(DeviceKey)) target = $"{DeviceKey}:{target}";

                var valueString = GetValue(ValueKeys.Result);
                var nativeCodeString = GetValue(ValueKeys.NativeCode);

                if (valueString != null || nativeCodeString != null)
                {
                    var value = valueString != null ? valueString.Replace("|", @"\|") : "";
                    var nativeCode = nativeCodeString != null ? nativeCodeString.Replace("|", @"\|") : "";
                    var resetTriggered = ResetTriggered != ResetTriggered.NOT_SPECIFIED ? $":{ResetTriggered} " : "";

                    if (Timestamp > 0 && Duration > 0)
                    {
                        return $"{Timestamp.ToDateTime().ToString("o")}@{Duration}|{target}|{nativeCode}|{resetTriggered}{value}";
                    }
                    else if (Timestamp > 0)
                    {
                        return $"{Timestamp.ToDateTime().ToString("o")}|{target}|{nativeCode}|{resetTriggered}{value}";
                    }
                    else
                    {
                        return $"|{target}|{resetTriggered}{value}";
                    }
                }
            }

            return null;
        }

        /// <summary>
        /// Read a ShdrCondition object from an SHDR line
        /// </summary>
        /// <param name="input">SHDR Input String</param>
        public static ShdrMessage FromString(string input)
        {
            if (!string.IsNullOrEmpty(input))
            {
                // Expected format : <timestamp>|<data_item_name>|<native_code>|<message>
                // Expected format : 2014-09-29T23:59:33.460470Z|htemp|WARNING|HTEMP|1|HIGH|Oil Temperature High

                // Start reading input and read Timestamp first (if specified)
                var x = ShdrLine.GetNextValue(input);

                if (DateTime.TryParse(x, null, System.Globalization.DateTimeStyles.AdjustToUniversal, out var timestamp))
                {
                    var y = ShdrLine.GetNextSegment(input);
                    return FromLine(y, timestamp.ToUnixTime());
                }
                else
                {
                    var y = ShdrLine.GetNextSegment(input);
                    return FromLine(y);
                }
            }

            return null;
        }

        private static ShdrMessage FromLine(string input, long timestamp = 0)
        {
            if (!string.IsNullOrEmpty(input))
            {
                try
                {
                    var message = new ShdrMessage();
                    message.Timestamp = timestamp;

                    // Set DataItemKey
                    var x = ShdrLine.GetNextValue(input);
                    var y = ShdrLine.GetNextSegment(input);

                    // Get Device Key (if specified). Example : Device01:avail
                    var match = _deviceKeyRegex.Match(x);
                    if (match.Success && match.Groups.Count > 2)
                    {
                        message.DeviceKey = match.Groups[1].Value;
                        message.DataItemKey = match.Groups[2].Value;
                    }
                    else
                    {
                        message.DataItemKey = x;
                    }

                    if (y != null)
                    {
                        // Set NativeCode
                        x = ShdrLine.GetNextValue(y);
                        y = ShdrLine.GetNextSegment(y);
                        message.NativeCode = x;

                        // Set Text
                        x = ShdrLine.GetNextValue(y);
                        message.CDATA = x;
                    }

                    return message;
                }
                catch { }
            }

            return null;
        }

        private static string GetTimestampString(long timestamp, double duration = 0)
        {
            if (duration > 0)
            {
                return $"{timestamp.ToDateTime().ToString("o")}@{duration}";
            }
            else
            {
                return timestamp.ToDateTime().ToString("o");
            }
        }

        private static string GetTimestampString(DateTime timestamp, double duration = 0)
        {
            if (duration > 0)
            {
                return $"{timestamp.ToString("o")}@{duration}";
            }
            else
            {
                return timestamp.ToString("o");
            }
        }
    }
}