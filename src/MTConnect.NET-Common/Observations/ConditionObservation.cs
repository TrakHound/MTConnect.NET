// Copyright (c) 2023 TrakHound Inc., All Rights Reserved.
// TrakHound Inc. licenses this file to you under the MIT license.

using MTConnect.Devices;
using MTConnect.Devices.DataItems;
using System;

namespace MTConnect.Observations
{
    /// <summary>
    /// An abstract XML Element. Replaced in the XML document by type(s) of Condition type Data Elements representing CONDITION category data items defined for a Device in the Device Information Model.
    /// There can be multiple types of Condition type XML Elements in a Condition container.
    /// </summary>
    public class ConditionObservation : Observation, IConditionObservation
    {
        /// <summary>
        /// Type associated with the DataItem
        /// </summary>
        public override string Type => base.Type;


        /// <summary>
        /// Level of the Condition (Normal, Warning, Fault, or Unavailable)
        /// </summary>
        public ConditionLevel Level
        {
            get => GetValue(ValueKeys.Level).ConvertEnum<ConditionLevel>();
            set => AddValue(ValueKeys.Level, value.ToString());
        }

        /// <summary>
        /// The native code (usually an alpha-numeric value) generated by the controller of a piece of equipment providing a reference identifier for a condition state or alarm.
        /// This is the same information an operator or maintenance personnel would see as a reference code designating a specific type of Condition when viewed at the piece of equipment.Usually this reference code is used to point to a more detailed description of the Condition.
        /// </summary>
        public string NativeCode
        {
            get => GetValue(ValueKeys.NativeCode);
            set => AddValue(ValueKeys.NativeCode, value);
        }

        /// <summary>
        /// If the data source assigns a severity level to a Condition, nativeSeverity is used to report that severity information to a client software application.
        /// </summary>
        public string NativeSeverity
        {
            get => GetValue(ValueKeys.NativeSeverity);
            set => AddValue(ValueKeys.NativeSeverity, value);
        }

        /// <summary>
        /// Qualifies the Condition and adds context or additional clarification.
        /// This optional attribute can be used to convey information such as HIGH or LOW type Warning and Fault condition to indicate differing types of condition states
        /// </summary>
        public ConditionQualifier Qualifier
        {
            get => GetValue(ValueKeys.Qualifier).ConvertEnum<ConditionQualifier>();
            set => AddValue(ValueKeys.Qualifier, value.ToString());
        }

        /// <summary>
        /// The type of statistical calculation specified for the DataItem defined in the Device Information Model that this Condition element represents.
        /// </summary>
        public DataItemStatistic Statistic
        {
            get => GetValue(ValueKeys.Statistic).ConvertEnum<DataItemStatistic>();
            set => AddValue(ValueKeys.Statistic, value.ToString());
        }

        /// <summary>
        /// Used to describe a value (text or data) published as part of an Condition Fault State.
        /// </summary>
        public string Message
        {
            get => GetValue(ValueKeys.Message);
            set => AddValue(ValueKeys.Message, value);
        }

        /// <summary>
        /// Returns whether the Observation is Unavailable meaning a valid value cannot be determined
        /// </summary>
        public override bool IsUnavailable => GetValue(ValueKeys.Level) == Unavailable;


        public ConditionObservation()
        {
            _category = DataItemCategory.CONDITION;
            _representation = DataItemRepresentation.VALUE;
        }


        public new static ConditionObservation Create(IDataItem dataItem)
        {
            if (dataItem != null)
            {
                var observation = Create(dataItem.Type, dataItem.Representation);
                observation._dataItem = dataItem;
                observation._dataItemId = dataItem.Id;
                observation._representation = dataItem.Representation;
                observation._type = dataItem.Type;
                observation._subType = dataItem.SubType;
                observation._name = dataItem.Name;
                observation._compositionId = dataItem.CompositionId;
                return observation;
            }

            return null;
        }

        public static ConditionObservation Create(IObservation observation)
        {
            if (observation != null)
            {
                var result = Create(observation.Type, observation.Representation);
                result._dataItem = observation.DataItem;
                result._dataItemId = observation.DataItemId;
                result._representation = observation.Representation;
                result._type = observation.Type;
                result._subType = observation.SubType;
                result._name = observation.Name;
                result._compositionId = observation.CompositionId;
                result._instanceId = observation.InstanceId;
                result._sequence = observation.Sequence;
                result._timestamp = observation.Timestamp;
                result.AddValues(observation.Values);
                return result;
            }

            return null;
        }


        public static ConditionObservation Create(string type, DataItemRepresentation representation)
        {
            if (!string.IsNullOrEmpty(type))
            {
                if (_types == null) _types = GetAllTypes();

                if (!_types.IsNullOrEmpty())
                {
                    var key = string.Intern(type + ":" + (int)representation);

                    // Lookup Type ID (Type as PascalCase)
                    _typeIds.TryGetValue(key, out var typeId);
                    if (typeId == null)
                    {
                        typeId = $"{type.ToPascalCase()}{representation.ToString().ToPascalCase()}";
                        _typeIds.Add(key, typeId);
                    }

                    if (_types.TryGetValue(key, out Type t))
                    {
                        var constructor = t.GetConstructor(System.Type.EmptyTypes);
                        if (constructor != null)
                        {
                            try
                            {
                                switch (representation)
                                {
                                    case DataItemRepresentation.VALUE: return (ConditionObservation)Activator.CreateInstance(t);
                                }
                            }
                            catch { }
                        }
                    }
                }
            }

            switch (representation)
            {
                default: return new ConditionObservation();
            }
        }
    }
}